apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: staking-indexer
  namespace: phase-1-staging
spec:
  interval: 1m
  chart:
    spec:
      chart: boilerplate
      version: "0.6.0"
      sourceRef:
        kind: HelmRepository
        name: aws-ecr
        namespace: flux-system
      interval: 3m
  values:
    namespace: phase-1-staging
    name: staking-indexer
    deployment:
      image: 490721144737.dkr.ecr.us-east-1.amazonaws.com/staking-indexer
      version: 106ab4fafeeb5281477829df53628652dd554283
      replicas: 1
      ports:
        - protocol: TCP
          containerPort: 2112
          name: prom
      volumes:
        - name: staking-indexer-configmap
          configMap:
            name: staking-indexer
        - name: phase1-global-configmap
          configMap:
            name: phase1-global-config
        - name: staking-indexer-configs
          emptyDir: {}
        - name: staking-indexer
          persistentVolumeClaim:
            claimName: staking-indexer
      volumeMounts:
        - name: staking-indexer-configmap
          mountPath: /tmp/staking-indexer
        - name: phase1-global-configmap
          mountPath: /tmp/global
        - name: staking-indexer-configs
          mountPath: /home/staking-indexer/.sid
        - name: staking-indexer
          mountPath: /home/staking-indexer/.sid/data
      command: |
        sid start
      env:
        - name: RABBITMQ_USERNAME
          valueFrom:
            secretKeyRef:
              name: staking-indexer
              key: rabbitmqUsername
        - name: RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: staking-indexer
              key: rabbitmqPassword
        - name: BTCNODE_USER
          valueFrom:
            secretKeyRef:
              name: staking-indexer
              key: btcnodeUser
        - name: BTCNODE_PASS
          valueFrom:
            secretKeyRef:
              name: staking-indexer
              key: btcnodePass
      nodeSelector:
        workload: "staging"
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "2112"
        prometheus.io/scheme: http
        prometheus.io/scrape: "true"
        configmap.reloader.stakater.com/reload: "staking-indexer, phase1-global-config"
      securityContext:
        fsGroup: 1138
      initContainer:
        enabled: true
        image: 490721144737.dkr.ecr.us-east-1.amazonaws.com/infra-toolkit
        version: v0.0.7
        command: |
          STAKING_INDEXER_DIR=/home/staking-indexer/.sid
          cp /tmp/staking-indexer/sid.conf $STAKING_INDEXER_DIR/sid.conf
          sed -i "s/^User =.*/User = $RABBITMQ_USERNAME/" $STAKING_INDEXER_DIR/sid.conf
          sed -i "s/^Password =.*/Password = $RABBITMQ_PASSWORD/" $STAKING_INDEXER_DIR/sid.conf
          sed -i "s/^RPCUser =.*/RPCUser = $BTCNODE_USER/" $STAKING_INDEXER_DIR/sid.conf
          sed -i "s/^RPCPass =.*/RPCPass = $BTCNODE_PASS/" $STAKING_INDEXER_DIR/sid.conf
          cp /tmp/global/global-params.json $STAKING_INDEXER_DIR/global-params.json
    service:
      enabled: true
      type: NodePort
      ports:
        - protocol: TCP
          port: 2112
          targetPort: prom
          name: prom
    persistence:
      enabled: true
      storageClassName: "ebs-sc"
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
    ingress:
      enabled: false
    purgeCloudflareCache:
      enabled: false
    encryptedConfig:
      rabbitmqUsername: AgCQdw3M/XyTLKBomuAnKFISjm5LvswdwXI6RXWQrwlKvIubEJKmwtQjLWp04bmlNFdnsjIxq8BQLvol8Ws1jjJvpg41TIwh/KOjz0Grt6ka8pwN2+boo2a1lAWnUJKRYQxAYYivcSJfCpK4rqb91xkGys9CX1P2yILbzoaepJEY3t8UqV4jvrlQTzH/yXgs1W/OEj02OlKw4Bigy8kQumQkJQFf3nECyN7Y1aU2alg6EbaQov6hRn1Brodbcdq+QThJmGt9f911y2OWMrQr/r2SA66DDP5Q7QLJiHQ5C36LNRLVsZnxbHBAleI6G+D62cllndqQElrwXx8Z1rxcef5Gz4jVpEo1B+PRiI+Opl43Eb9yIkLvENqnGID+eHUvr2LBqD4SXoCbMmFyQF3+W3tRU4T/zEB8gJn2K2RkGLwEmbtGoMDSSTbiHAX5aJpTNIZetWbTHLKxT7JhAaTi0eH6VOaGq9R0lZE1Ber0cfSJHqjpBAQbW1qKYCWsigWfbHiJS0oBi3EAShd/Rud0oVyi+XYk6y48KJCeAScbFtSI4uJ8V9eMLvRpcSJaySBSKFkK4wYdc1hT6bCKZQ5iBxeolHRyFrWB10TdhLttMm06VifPz3fvo5poYeVZZPrFHnitVBUjtaLRe1o71fr2DAsEEZyqzcL3rzs7un/hCfgNujQ4ZPPbON73UubtgV/J+IhaIbaeLpvkxg==
      rabbitmqPassword: AgBsxpR0XqjxdzRpY6bPlmQuK9TFLVjdux0446FOajYQBJqOSnd1XbJIzA3z/y3ceJ/O4BhYc/4GP2c2xs2VFxfD+trLjROe3NkIBoK3OjAWn+F+hjJtVp9pm+zwdqO5rSl0S4w8Hv0yzSdfWf3/6q9z+2F/I0O9jaiWupzVF8dPekb7IzU32vzeixTnk6emgqANJkw0Rm5Mrc6ZGN1GOdbgXn5PJhUUUgcXpGPGn5F325xk/CjfoHMxpdYPhH14nUtM1ffBDoNrtD5JHHJh4mGeARVzgL5rBYK3Jmh0qP0gqtuI/U45wBWtT9rmAJw7k4gx4O5RkOVLZ+Tr+jGD1woJbiogo+w1kOque63P0b7JbMxEjXM0KJoFm+e0GxtAA4vl6GzT4s2FvI4jCtXvgmDzVCh891KRRHPC2oEAsAoNQREv4HlSqro6IkxmQexFpPA7PeK5cR3C9scL0fAnRB21Q0Lqw1C0oN7iM4pfYqBmgijhBjlURrjeotaIl2Uc92te5LXWPb/9ula0NZ3d/jgf1lM8HiwIyuhnWW0KqayarzQxBUiTPgG+6Res58zMefl3CZKtjNz6j6RGYHFv1iRRaqvk+rHRHt434D4Ejnad1Ty6qZZv0kVwBABUtc2Dxh05hKwehhrq4gTd0mWHllInjYr4hmCK0D1Hc5TEla6irjR3wCgqpDPrShIH543vvw3KEIxopg6Pihkc2A+wAcNQFoKHrfUED4uTd39MJD3dhw==
      btcnodeUser: AgAUz4E6CbM8soMrrpzSCXG+US+TiyKBxqjf14XKcGGRvqBiJaNaQ2XEEV7OxRKqhEV2g2hzm14FYzxQO5SRVr9Ekp+jSFl4BRJgm0KeZS7v57Q51PnVNG0uN69usGDvm3UVGeoqMOSLQNi9N4XqA58cWW67l0nDRGALxFeANEcIE1IL3o9dTKwBeoIR5LJAz3zuETTR0lZbx+Yx1huKYZEvogl4TBjwYuCFALD6MBAzQJyztiCpKPl+yWoPFPQZXqIHpHymSYhn5rYRwynYm7mkrvpPUrXRETeojUTeZerRqSYbaVCvn/QKlA+l98x3v5nEnkd+F4GAibhlHrGXl3G5seSSG8y0KBkRFonYZPskDSinUH8Y0Ush/nHCH8o6+fOmrhUJu/O1BaUaW1xpskpjGfChHzETKfVmSnOA8Qg7YNYR0WaCGPfaCKCpxv47JdEvHXBMgqSopCLXKpGbLtnXXX6iqwpFrbnM88amZ+DP1CMII8YX5j36o7oDYJYbQw090kk7IyF0SFVlCw2RtCJ88rYaqd3iZDE1Etm4DXnOEwRdKlCm2X0n0fPfoXfonQRFqfduhDALrbSyoIBnRz8LWd3QI5QMeWUdtBqfnGb5OkfxUwCQVJwTtc7MFDC/iaR2hZTv23lX6yum63Om8xcaM4bVRg4puKd2jd7OmIt3uGdS+xjZQ47DpyxdzeNgqfJFIUbOYiVjqHHcyhnMvxDsQSOHVHU6A71weGReOZqXAQ==
      btcnodePass: AgCf7O/MHzK2T1r32HFKs5nnlDN1WhJ92dRjKp7r56BJviZ/PeEigeEJsI+gEg4QIKNXmUEDFa0oWjVUv9J1WQHxtiby6Zir4tktz5fMfF+cTSOvc7FBrwWAvNNLeqz7fcXog+UI1L0ZLJ8laMkDHiN3CEiYEVJMkXEP1I2GA1v6b5lyJptWDeFv0XRuX5Cd47cW3Hl2Fl2i776HmcuBr8UIM8RyOIEACirLndoLFPVXHspc3KuMjCG53Iotf8arRWk6yBdWHpd+Y0BeHKy3QblhEwelKQ8UMHO5OzGAAcPIMLFfeDhltzrpF+QRC0fbe2vTt0TSMGGxX/UatQQljt5SpYHbLz+jKduwniuxLJilwbdrXVqjzbyIBN1dXX1R/dpuKF89BKJ5yR7Dp0VJkdorSg4ppumwrVnLd6dvPHXT2GEmuVg8uS/zjFWt8nmun0iZO+B8HZTuj8hK4AHoGXd1JkXQctoca07vu1zvcy/CiKgTiWNRt900BJCy1ljsb0O2QAfPAz/n6yug793w2bMe56JuUmhdnJApYDdx/nqy3U4srU1dZ+kqzzqQB2XSzDCOX/kqDjTV0X/Tdl3iQ11G3+ei2unPVpUfy+LJz/AkH9vPo7YitYWa38X/e1S6f9wQWhsEQShkk8FfxOdLC0tWiCBkz2oAouB4eDWftTtE4kkyaDOR3FexZBAUddOAmHs+VbPi32u7Dv2/LY+K1DMZrrDU8GK9G/EJ1dXK1zHXDw==
    configFiles:
      sid.conf: |
        [Application Options]
        ; Logging level for all subsystems {trace, debug, info, warn, error, fatal}
        LogLevel = debug

        ; Bitcoin network to run on {mainnet, regtest, testnet, signet}
        BitcoinNetwork = signet

        [btcconfig]
        ; The daemon's rpc listening address
        RPCHost = bitcoind.bitcoind-signet:38332/wallet/signet

        ; Username for RPC connections
        RPCUser =

        ; Password for RPC connections
        RPCPass =

        ; The maximum number of peers staker will choose from the backend node to retrieve pruned blocks from. This only applies to pruned nodes.
        PrunedNodeMaxPeers = 0

        ; The interval that will be used to poll bitcoind for new blocks. Only used if rpcpolling is true.
        BlockPollingInterval = 10s

        ; The interval that will be used to poll bitcoind for new tx. Only used if rpcpolling is true.
        TxPollingInterval = 10s

        ; size of the Bitcoin blocks cache
        BlockCacheSize = 20971520

        MaxRetryTimes = 5

        RetryInterval = 0.5s

        [dbconfig]
        ; The directory path in which the database file should be stored.
        DBPath = /home/staking-indexer/.sid/data

        ; The name of the database file.
        DBFileName = bbolt.db

        ; Prevents the database from syncing its freelist to disk, resulting in improved performance at the expense of increased startup time.
        NoFreelistSync = true

        ; Specifies if a Bolt based database backend should be automatically compacted on startup (if the minimum age of the database file is reached). This will require additional disk space for the compacted copy of the database but will result in an overall lower database size after the compaction.
        AutoCompact = false

        ; Specifies the minimum time that must have passed since a bolt database file was last compacted for the compaction to be considered again.
        AutoCompactMinAge = 168h0m0s

        ; Specifies the timeout value to use when opening the wallet database.
        DBTimeout = 1m0s

        [queueconfig]
        ; the user name of the queue
        User =

        ; the password of the queue
        Password =

        ; the url of the queue
        Url = rabbitmq-headless.phase-1-staging:5672

        ; the process timeout of the queue
        ProcessingTimeout = 5s
        
        ; the maximum number of times a message will be retried
        MsgMaxRetryAttempts = 10

        ; the time a message will be hold in delay queue before being sent to main queue again
        ReQueueDelayTime = 300s

        [metricsconfig]
        ; IP of the Prometheus server
        Host = 0.0.0.0

        ; Port of the Prometheus server
        Port = 2112
